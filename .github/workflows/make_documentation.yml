name: Generate Documentation

on:
  push:
    branches:
      - '**'  # Esegui il workflow su tutti i branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          cd docs/maker_documentation
          pip install -r requirements.txt

      - name: Run main script
        run: |
          cd docs/maker_documentation
          python main.py  # Esegui lo script che genera i file di documentazione

      - name: Debug file existence
        run: |
          cd docs/md_docs
          echo "Checking if software-list.md exists:"
          ls -l software-list.md  # Verifica se il file esiste
          echo "Checking if soup-list.md exists:"
          ls -l soup-list.md  # Verifica se il file esiste

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Force add and commit generated docs
        run: |
          cd docs

          # Controlla lo stato corrente
          echo "Stato di Git prima di aggiungere i file"
          git status

          # Forza l'aggiunta dei file, anche se non tracciati o modificati
          git add --force md_docs/software-list.md md_docs/soup-list.md

          # Mostra di nuovo lo stato per vedere se i file sono aggiunti correttamente
          echo "Stato di Git dopo aver aggiunto i file"
          git status

          # Forza un commit se ci sono modifiche
          git commit -m "Aggiornamento documentazione" || echo "Nessun cambiamento da committare"

          # Effettua il push
          git push origin HEAD:${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up unwanted files
        run: |
          git clean -fdX  # Rimuove file non tracciati come __pycache__
